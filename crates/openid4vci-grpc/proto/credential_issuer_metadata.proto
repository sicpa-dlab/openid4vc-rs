syntax = "proto3";

package openid4vci;

import "types.proto";

// Struct mapping the `issuer_metadata` as defined in section 10.2.3 of the openid4vci specification.
message CredentialIssuerMetadata {
  // The Credential Issuer's identifier
  string credential_issuer = 1;

  // Identifier of the OAuth 2.0 Authorization Server the Credential Issuer relies on for authorization.
  // If this element is omitted, the entity providing the Credential Issuer is also acting as the AS.
  // The Credential Issuer's identifier is used as the OAuth 2.0 Issuer value to obtain the Authorization Server metadata.
  optional string authorization_server = 2;

  // URL of the Credential Issuer's Credential Endpoint.
  string credential_endpoint = 3;

  // URL of the Credential Issuer's Batch Credential Endpoint.
  // If omitted, the Credential Issuer does not support the Batch Credential Endpoint.
  optional string batch_credential_endpoint = 4;

  // A JSON array containing a list of JSON objects, each representing metadata about a separate credential type.
  // NOTE: You can't really have dynamic properties in protobuf, and the type of each entry in credentials_supported changes
  // based on the value of the `format` field. So we just use a serialized JSON object here.
  repeated bytes credentials_supported = 5;
}

// Struct mapping the `credential_supported` as defined in section 10.2.3.1 of the openid4vci specification.
message CredentialSupported {
  // A JSON string identifying the format of this credential.
  CredentialFormatProfile format = 1;

  // A JSON string identifying the respective object.
  // The value MUST be unique across all `credentials_supported` entries in the Credential Issuer Metadata.
  optional string id = 2;

  // Array of case-sensitive strings that identify how the Credential is bound to the identifier of the End-User.
  /* optional */ repeated string cryptographic_binding_methods_supported = 3;

  // Array of case-sensitive strings that identify the cryptographic suites that are supported for the cryptographic_binding_methods_supported.
  /* optional */ repeated string cryptographic_suites_supported = 4;

  // An array of objects containing the display properties of the supported credential for a certain language.
  /* optional */ repeated DisplayProperties display = 5;
}

// Struct mapping the `display` type as defined in section 10.2.3.1 of the openid4vci specification.
message DisplayProperties {
  // Display name for the Credential.
  string name = 1;

  // String value that identifies the language of this object represented as a language tag taken from values defined in BCP47.
  // Multiple display objects MAY be included for separate languages. There MUST be only one object with the same language identifier.
  optional string locale = 2;

  // A JSON object with information about the logo of the Credential.
  optional DisplayLogo logo = 3;

  // String value of a description of the Credential.
  optional string description = 4;

  // String value of a background color of the Credential represented as numerical color values defined in CSS Color Module Level 3.
  optional string background_color = 5;

  // String value of a text color of the Credential represented as numerical color values defined in CSS Color Module Level 3.
  optional string text_color = 6;
}


// Struct mapping the `logo` type as defined in section 10.2.3.1 of the openid4vci specification.
message DisplayLogo {
  // URL where the Wallet can obtain a logo of the Credential from the Credential Issuer.
  optional string url = 1;

  // String value of an alternative text of a logo image.
  optional string alt_text = 2;
}