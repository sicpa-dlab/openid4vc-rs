syntax = "proto3";

import "error.proto";
import "credential_issuer_metadata.proto";
import "credential_request.proto";
import "types.proto";

package openid4vci;

// Service for working with credentials in OpenID4VCI. Can be used to create credential offers
// evaluate credential requests, and create credential responses.
service CredentialIssuerService {
  // Create a credential offer.
  rpc CreateCredentialOffer(CreateCredentialOfferRequest)
      returns (CreateCredentialOfferResponse);

  // Evaluate a credential request and return information about the request. 
  rpc EvaluateCredentialRequest(EvaluateCredentialRequestRequest)
      returns (EvaluateCredentialRequestResponse);

  // Pre-evaluate a credential request. This is used for extracting some information
  // from the credential request that is needed for full evaluation (as e.g. the evaluate
  // methods need a did document, for which the did first needs to be extracted)
  rpc PreEvaluateCredentialRequest(PreEvaluateCredentialRequestRequest)
      returns (PreEvaluateCredentialRequestResponse);

  // Create a credential success response for a credential request.
  rpc CreateCredentialSuccessResponse(CreateCredentialSuccessResponseRequest)
      returns (CreateCredentialSuccessResponseResponse);

  // Create a credential error response for a credential request.
  rpc CreateCredentialErrorResponse(CreateCredentialErrorResponseRequest)
      returns (CreateCredentialErrorResponseResponse);

}

// Request to create a credential offer.
message CreateCredentialOfferRequest {
  CredentialIssuerMetadata issuer_metadata = 1;
  repeated CredentialOrId credentials = 2;
  optional string credential_offer_endpoint = 3;
  optional AuthorizedCodeFlow authorized_code_flow = 4;
  optional PreAuthorizedCodeFlow pre_authorized_code_flow = 5;
}

// Response to create a credential offer.
message CreateCredentialOfferResponse {
  oneof response {
    Success success = 1;
    Error error = 2;
  }

  message Success {
    bytes credential_offer = 1;
    string credential_offer_url = 2;
  }
}

// Request to pre-evaluate a credential request.
message PreEvaluateCredentialRequestRequest {
  bytes credential_request = 1;
}

// Response to pre-evaluate a credential request.
message PreEvaluateCredentialRequestResponse {
  oneof response {
    Success success = 1;
    Error error = 2;
  }

  message Success {
    optional string did = 1;
  }
}

// Request to evaluate a credential request.
message EvaluateCredentialRequestRequest {
  CredentialIssuerMetadata issuer_metadata = 1;
  CredentialRequest credential_request = 2;
  optional bytes credential_offer = 3;
  optional bytes authorization_server_metadata = 4;
  optional bytes did_document = 5;
  optional EvaluateOptions evaluate_credential_request_options = 6;

  message CNonceOptions {
    // Lifetime of the nonce from Utc::now in seconds
    uint32 c_nonce_expires_in = 1;

    // Expected nonce in the `JWT`
    string expected_c_nonce = 2;

    // Timestamp of when the nonce was created
    int64 c_nonce_created_at = 3;
  }

  // Additional options for validation of the credential request
  message EvaluateOptions { 
    // Additional nonce options for validation
    optional CNonceOptions c_none = 1;
  }
}

// Response to evaluate a credential request.
message EvaluateCredentialRequestResponse {
  oneof response {
    Success success = 1;
    Error error = 2;
  }

  message ProofOfPossesionResponse {
    // (JWA) Algorithm used for signing
    string algorithm = 1;

    // Public key bytes that can be used for verification
    bytes public_key = 2;

    // Message that needs to be verified by the consumer
    bytes message = 3;

    // Signature over the message, using the public key, that can be used by the consumer to verify it
    bytes signature = 4;
  }

  message Success {
    optional ProofOfPossesionResponse proof_of_possession = 1;
  }
}

// Request to create a credential success response.
message CreateCredentialSuccessResponseRequest {
  CredentialRequest credential_request = 1;

  // Contains issued Credential. MUST be present when `acceptance_token` is not returned
  // Must be either a String or a JSON object, dependant on the `format` being requested in the credential request.
  optional bytes credential = 2;

  // A JSON string containing a security token subsequently used to obtain a Credential. MUST be
  // present when credential is not returned.
  optional string acceptance_token = 3;

  // JSON string containing a nonce to be used to create a proof of possession of key material
  optional string c_nonce = 4;

  // JSON integer denoting the lifetime in seconds of the c_nonce.
  optional uint32 c_nonce_expires_in = 5;
}

// Response to create a credential success response.
message CreateCredentialSuccessResponseResponse {
  oneof response {
    Success success = 1;
    Error error = 2;
  }

  message Success {
    CredentialSuccessResponse success_response = 1;
    string created_at = 2;
  }
}

// Request to create a credential error response.
message CreateCredentialErrorResponseRequest {
  string error = 1;
  optional string error_description = 2;
  optional string error_uri = 3;
  optional bytes error_additional_details = 4;
}

// Response to create a credential error response.
message CreateCredentialErrorResponseResponse {
  oneof response {
    Success success = 1;
    Error error = 2;
  }

  message Success {
    OAuthErrorResponse error_response = 1;
  }
}
