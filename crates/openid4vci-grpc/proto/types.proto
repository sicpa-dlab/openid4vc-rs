syntax = "proto3";

package openid4vci;

message AuthorizedCodeFlow {
  // Issuer state that MUST be the same, if supplied, from the authorization request
  optional string issuer_state = 1;
}

message PreAuthorizedCodeFlow {
  // The code representing the Credential Issuer's authorization for the Wallet to obtain
  // Credentials of a certain type. This code MUST be short lived and single-use. If the Wallet
  // decides to use the Pre-Authorized Code Flow, this parameter value MUST be included in the
  // subsequent Token Request with the Pre-Authorized Code Flow.
  string code = 1;

  // Boolean value specifying whether the Credential Issuer expects presentation of a user PIN
  // along with the Token Request in a Pre-Authorized Code Flow. Default is false. This PIN is
  // intended to bind the Pre-Authorized Code to a certain transaction in order to prevent
  // replay of this code by an attacker that, for example, scanned the QR code while standing
  // behind the legit user. It is RECOMMENDED to send a PIN via a separate channel. If the
  // Wallet decides to use the Pre-Authorized Code Flow, a PIN value MUST be sent in the
  // user_pin parameter with the respective Token Request.
  optional bool user_pin_required = 2;
}

message CredentialOrId {
    oneof credential_or_id {
        bytes credential = 1;
        string id = 2;
    }
}

message CredentialSuccessResponse {
  // JSON string denoting the format of the issued Credential.
  string format = 1;

  // Contains issued Credential. present when `acceptance_token` is not returned
  // Must be either a String or a JSON object, dependant on the `format` being requested in the credential request.
  optional bytes credential = 2;

  // A JSON string containing a security token subsequently used to obtain a Credential. MUST be
  // present when credential is not returned.
  optional string acceptance_token = 3;

  // JSON string containing a nonce to be used to create a proof of possession of key material
  optional string c_nonce = 4;

  // JSON integer denoting the lifetime in seconds of the c_nonce.
  optional uint32 c_nonce_expires_in = 5;
}

message OAuthErrorResponse {
  // Error code indicating why the request failed.
  string error = 1;

  // Human-readable ASCII text providing additional information
  optional string error_description = 2;


  // A URI identifying a human-readable web page with information about the error,
  optional string error_uri = 3;

  // Optional additional details containing metadata about the error
  // NOTE: these properties MUST be flattened into the root of the response object
  optional bytes error_additional_details = 4;
}
