syntax = "proto3";

package openid4vci;

// Represents a credential format profile as defined in the Rust code.
message CredentialFormatProfile {
  // Format name for the profile.
  string format = 1;
  // Union field profile can contain different profile types.
  oneof profile {
    JwtVcJson jwt_vc_json = 2;
    JwtVcJsonLd jwt_vc_json_ld = 3;
    LdpVc ldp_vc = 4;
    MsoMdoc mso_mdoc = 5;
  }
}

// Profile type for VC signed as a JWT, not using JSON-LD.
message JwtVcJson {
  // Format name for the profile.
  string format = 1;

  // Types supported by the credential type.
  repeated string types = 2;
  // Key-value pairs representing the claim offered in the Credential.
  map<string, CredentialSubject> credential_subject = 3;
  // Order in which claims should be displayed by the Wallet.
  repeated string order = 4;
}

// Profile type for VC signed as a JWT, using JSON-LD.
message JwtVcJsonLd {
  // Types supported by the credential type.
  repeated string types = 1;
  // Key-value pairs representing the claim offered in the Credential.
  map<string, CredentialSubject> credential_subject = 2;
  // Order in which claims should be displayed by the Wallet.
  repeated string order = 3;
}

// Profile type for VC secured using Data Integrity, using JSON-LD.
message LdpVc {
  // JSON-LD context for the credential.
  repeated string context = 1;
  // Types supported by the credential type.
  repeated string types = 2;
  // Key-value pairs representing the claim offered in the Credential.
  map<string, CredentialSubject> credential_subject = 3;
  // Order in which claims should be displayed by the Wallet.
  repeated string order = 4;
}

// Profile type for credentials complying with ISO.18013-5.
message MsoMdoc {
  // Identifier for the credential type.
  string doctype = 1;
  // Key-value pairs representing the claims offered in the Credential.
  map<string, CredentialSubject> claims = 2;
  // Order in which claims should be displayed by the Wallet.
  repeated string order = 3;
}

// Represents the display properties of a claim in the Credential for a certain language.
message CredentialSubjectDisplay {
  // Display name for the claim.
  optional string name = 1;
  // Language identifier represented as language tag values defined in BCP47.
  optional string locale = 2;
}

// Represents a claim offered in the Credential.
message CredentialSubject {
  // Boolean indicating whether the claim must be present in the Credential.
  optional bool mandatory = 1;
  // Type of the claim value.
  string value_type = 2;
  // Display properties of the claim in the Credential for different languages.
  repeated CredentialSubjectDisplay display = 3;
}